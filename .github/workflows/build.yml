---
name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'


jobs:
  wheels:
    name: Build wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      CIBW_SKIP: pp* *-win32
      CIBW_TEST_REQUIRES:
      CIBW_TEST_COMMAND: "python -m laszip"
      # we are copying the shared libraries ourselves so skip magical copy
      CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
      MACOSX_DEPLOYMENT_TARGET: 10.9
      CIBW_BUILD_VERBOSITY_MACOS: 3
      CIBW_TEST_SKIP: "*-macosx_arm64 *-macosx_universal2:arm64"
      CIBW_ARCHS_MACOS: "x86_64 arm64"
      CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: ""
      # CIBW_BEFORE_BUILD_LINUX: "pip install cmake; bash {project}/ci/install_libspatialindex.bash"
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      name: Install Python
      with:
        python-version: '3.12'
    - name: Install cibuildwheel
      run: |
        python -m pip install cibuildwheel==2.17.0
    - name: Run MacOS Preinstall Build
      if: startsWith(matrix.os, 'macos')
      run: |
        # provides sha256sum
        brew install coreutils
        pip install cmake
        bash ci/install_libspatialindex.bash
    - uses: ilammy/msvc-dev-cmd@v1
      if: startsWith(matrix.os, 'windows')
    # - name: Run Windows Preinstall Build
    #   if: startsWith(matrix.os, 'windows')
    #   run: |
    #     choco install vcpython27 -f -y
    #     ci\install_libspatialindex.bat
    - name: Build wheels
      run: |
        python3 -m cibuildwheel --output-dir wheelhouse
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}-whl
        path: wheelhouse/*.whl

  wheels_aarch64:
    name: Build wheel on aarch64 for ${{ matrix.python_tag }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_tag: [ "cp37-*", "cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*"]
    env:
      CIBW_ARCHS_LINUX: aarch64
      CIBW_BUILD: ${{matrix.python_tag}}
      CIBW_TEST_REQUIRES: pytest numpy
      CIBW_TEST_COMMAND: "pytest -v {project}/tests"
      CIBW_BEFORE_BUILD_LINUX: "pip install cmake; bash {project}/ci/install_libspatialindex.bash"

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      name: Install Python
      with:
        python-version: '3.11'
    - name: Install cibuildwheel
      run: |
        python -m pip install cibuildwheel==2.17.0
    - uses: docker/setup-qemu-action@v2
      name: Set up QEMU
    - name: Build wheels
      run: |
        python -m cibuildwheel --output-dir wheelhouse
    - uses: actions/upload-artifact@v3
      with:
        name: aarch64-whl
        path: wheelhouse/*.whl

  collect-artifacts:
    name: Package and push release

    needs: [wheels]

    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: true

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.11'
      - name: Source
        shell: bash -l {0}
        run: |
            python3 -m pip install --upgrade pip
            python3 -m pip install .

      - uses: actions/download-artifact@v3
        with:
          path: dist
        name: Download artifacts

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: dist

      - name: Unpack
        shell: bash -l {0}
        working-directory: dist
        run: |
          for f in *whl
          do
            cd "$f"
            cp *.whl ..
            cd ..
          done;
          rm -rf *\-whl
          ls -al

      - uses: pypa/gh-action-pypi-publish@release/v1
        name: Publish package
        if: github.event_name == 'release' && github.event.action == 'published'
        with:
          user: __token__
          password: ${{ secrets.pypi_token }}
          packages_dir: ./dist
# jobs:
#   Build-ManyLinux-Wheels:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Clone
#         uses: actions/checkout@v4

#       - name: Build Wheel
#         run: docker run --rm -v `pwd`:/laszip-python -e PLAT=manylinux2014_x86_64 quay.io/pypa/manylinux2014_x86_64 /bin/sh /laszip-python/scripts/build-wheels-linux.sh

#       - name: Upload wheels as artifacts
#         uses: actions/upload-artifact@v2
#         with:
#           name: "manylinux-wheels"
#           path: "./wheelhouse/*manylinux*.whl"

#   Build-ManyLinux-Arm64-Wheels:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Clone
#         uses: actions/checkout@v4

#       - name: Set up QEMU
#         uses: docker/setup-qemu-action@v3

#       - name: Build Wheel
#         run: docker run --rm -v `pwd`:/laszip-python --platform linux/arm64 -e PLAT=manylinux2014_aarch64 quay.io/pypa/manylinux2014_aarch64 /bin/sh /laszip-python/scripts/build-wheels-linux.sh

#       - name: Upload wheels as artifacts
#         uses: actions/upload-artifact@v3
#         with:
#           name: "manylinux-arm64-wheels"
#           path: "./wheelhouse/*manylinux*.whl"

#   Build-MacOs-Wheels:
#     runs-on: macos-latest
#     strategy:
#       matrix:
#         python-version: [ "3.8", "3.9", "3.10", "3.11", "3.12" ]

#     steps:
#       - name: Clone
#         uses: actions/checkout@v4

#       - name: Setup python
#         uses: actions/setup-python@v4
#         with:
#           python-version: ${{ matrix.python-version }}
#           architecture: x64

#       - name: Print Python info
#         run: |
#           which python${{ matrix.python-version }}
#           python${{ matrix.python-version }} --version

#       - name: Install dependencies (macos)
#         run: |
#           brew install laszip ninja
#           python${{ matrix.python-version }} -m pip install --upgrade pip
#           python${{ matrix.python-version }} -m pip install delocate

#       - name: Build Wheels
#         run: python${{ matrix.python-version }} -m pip wheel --wheel-dir dist .
#         env:
#             SKBUILD_CMAKE_ARGS: "-DCMAKE_OSX_DEPLOYMENT_TARGET=10.14"

#       - name: Delocate wheels
#         run: /bin/sh scripts/delocate-wheel.sh

#       - name: Test importing the wheel
#         run: |
#           brew uninstall laszip
#           whl_path="$(ls ./dist/*.whl | head -1)"
#           python${{ matrix.python-version }} -m pip install $whl_path
#           python${{ matrix.python-version }} -c "import laszip"

#       - name: Upload wheel as artifacts
#         uses: actions/upload-artifact@v3
#         with:
#           name: "macOs-python${{ matrix.python-version }}"
#           path: "./dist/*.whl"

#   Build-Windows-Wheels:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [ "3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Clone
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Print Python info
        run: |
          py -${{ matrix.python-version }} --version

      - name: Install dependencies
        run: |
          vcpkg install laszip:x64-windows
          py -${{ matrix.python-version }} -m pip install --upgrade pip

      - name: Build Wheels
        shell: pwsh
        run: |
            py -${{ matrix.python-version }} -m pip wheel --wheel-dir dist .`
        env:
            SKBUILD_CMAKE_ARGS: "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake"

      - name: Test importing the wheel
        run: |
          vcpkg remove laszip:x64-windows
          $whl_path=ls ./dist/*.whl | Select-Object -Index 0
          py -${{ matrix.python-version }} -m pip install "$whl_path"
          py -${{ matrix.python-version }} -c "import laszip"

      - name: Upload wheel as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "windows-python${{ matrix.python-version }}"
          path: "./dist/*.whl"
